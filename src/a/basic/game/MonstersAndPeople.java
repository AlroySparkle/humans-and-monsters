/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package a.basic.game;

import java.io.File;

import java.io.FileNotFoundException;
import java.io.IOException;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Formatter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;


/**
 *
 * @author Alroy Travail
 */
public class MonstersAndPeople extends javax.swing.JFrame {

    /**
     * Creates new form MonstersAndPeople
     */
    public MonstersAndPeople() {
        initComponents();
        M4.setVisible(false);
        M5.setVisible(false);
        M6.setVisible(false);
        M7.setVisible(false);
        M8.setVisible(false);
        P4.setVisible(false);
        P5.setVisible(false);
        P6.setVisible(false);
        P7.setVisible(false);
        P8.setVisible(false);
        
        Main_Menu();
    }
    String turn = "l";
    int player = 0;
    int leftM=3;
    int leftP=3;
    int rightM=0;
    int rightP=0;
    boolean song=true;

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainMenu = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        Game = new javax.swing.JPanel();
        M1 = new javax.swing.JButton();
        M2 = new javax.swing.JButton();
        M3 = new javax.swing.JButton();
        M7 = new javax.swing.JButton();
        M8 = new javax.swing.JButton();
        M4 = new javax.swing.JButton();
        M5 = new javax.swing.JButton();
        M6 = new javax.swing.JButton();
        P1 = new javax.swing.JButton();
        P2 = new javax.swing.JButton();
        P3 = new javax.swing.JButton();
        P4 = new javax.swing.JButton();
        P5 = new javax.swing.JButton();
        P6 = new javax.swing.JButton();
        P7 = new javax.swing.JButton();
        P8 = new javax.swing.JButton();
        DisplaySide = new javax.swing.JLabel();
        PlayB = new javax.swing.JButton();
        BackGround = new javax.swing.JLabel();
        New = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("People vs Monsters");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton4.setText("Play");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setText("Developer");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton6.setText("Exit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainMenuLayout = new javax.swing.GroupLayout(MainMenu);
        MainMenu.setLayout(MainMenuLayout);
        MainMenuLayout.setHorizontalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        MainMenuLayout.setVerticalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(34, 34, 34))
        );

        Game.setLayout(null);

        M1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster.png"))); // NOI18N
        M1.setBorder(null);
        M1.setContentAreaFilled(false);
        M1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M1ActionPerformed(evt);
            }
        });
        Game.add(M1);
        M1.setBounds(10, 130, 30, 30);

        M2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster.png"))); // NOI18N
        M2.setBorder(null);
        M2.setContentAreaFilled(false);
        M2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M2ActionPerformed(evt);
            }
        });
        Game.add(M2);
        M2.setBounds(50, 130, 30, 30);

        M3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster.png"))); // NOI18N
        M3.setBorder(null);
        M3.setContentAreaFilled(false);
        M3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M3ActionPerformed(evt);
            }
        });
        Game.add(M3);
        M3.setBounds(90, 130, 30, 30);

        M7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster.png"))); // NOI18N
        M7.setBorder(null);
        M7.setContentAreaFilled(false);
        M7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M7ActionPerformed(evt);
            }
        });
        Game.add(M7);
        M7.setBounds(220, 150, 30, 30);

        M8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster.png"))); // NOI18N
        M8.setBorder(null);
        M8.setContentAreaFilled(false);
        M8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M8ActionPerformed(evt);
            }
        });
        Game.add(M8);
        M8.setBounds(170, 150, 30, 30);

        M4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster2.png"))); // NOI18N
        M4.setBorder(null);
        M4.setContentAreaFilled(false);
        M4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M4ActionPerformed(evt);
            }
        });
        Game.add(M4);
        M4.setBounds(360, 130, 30, 30);

        M5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster2.png"))); // NOI18N
        M5.setBorder(null);
        M5.setContentAreaFilled(false);
        M5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M5ActionPerformed(evt);
            }
        });
        Game.add(M5);
        M5.setBounds(320, 130, 30, 30);

        M6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Monster2.png"))); // NOI18N
        M6.setBorder(null);
        M6.setContentAreaFilled(false);
        M6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                M6ActionPerformed(evt);
            }
        });
        Game.add(M6);
        M6.setBounds(400, 130, 30, 30);

        P1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People.png"))); // NOI18N
        P1.setBorder(null);
        P1.setContentAreaFilled(false);
        P1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P1ActionPerformed(evt);
            }
        });
        Game.add(P1);
        P1.setBounds(10, 90, 30, 30);

        P2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People.png"))); // NOI18N
        P2.setBorder(null);
        P2.setContentAreaFilled(false);
        P2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P2ActionPerformed(evt);
            }
        });
        Game.add(P2);
        P2.setBounds(50, 90, 30, 30);

        P3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People.png"))); // NOI18N
        P3.setBorder(null);
        P3.setContentAreaFilled(false);
        P3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P3ActionPerformed(evt);
            }
        });
        Game.add(P3);
        P3.setBounds(90, 90, 30, 30);

        P4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People2.png"))); // NOI18N
        P4.setBorder(null);
        P4.setContentAreaFilled(false);
        P4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P4ActionPerformed(evt);
            }
        });
        Game.add(P4);
        P4.setBounds(320, 90, 30, 30);

        P5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People2.png"))); // NOI18N
        P5.setBorder(null);
        P5.setContentAreaFilled(false);
        P5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P5ActionPerformed(evt);
            }
        });
        Game.add(P5);
        P5.setBounds(360, 90, 30, 30);

        P6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People2.png"))); // NOI18N
        P6.setBorder(null);
        P6.setContentAreaFilled(false);
        P6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P6ActionPerformed(evt);
            }
        });
        Game.add(P6);
        P6.setBounds(400, 90, 30, 30);

        P7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People.png"))); // NOI18N
        P7.setBorder(null);
        P7.setContentAreaFilled(false);
        P7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P7ActionPerformed(evt);
            }
        });
        Game.add(P7);
        P7.setBounds(220, 110, 30, 30);

        P8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/People.png"))); // NOI18N
        P8.setBorder(null);
        P8.setContentAreaFilled(false);
        P8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                P8ActionPerformed(evt);
            }
        });
        Game.add(P8);
        P8.setBounds(170, 110, 30, 30);

        DisplaySide.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DisplaySide.setText("Left turn");
        Game.add(DisplaySide);
        DisplaySide.setBounds(10, 10, 90, 20);

        PlayB.setText("Transmit");
        PlayB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayBActionPerformed(evt);
            }
        });
        Game.add(PlayB);
        PlayB.setBounds(170, 60, 110, 21);

        BackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/a/basic/game/Background.png"))); // NOI18N
        BackGround.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BackGround.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackGroundKeyPressed(evt);
            }
        });
        Game.add(BackGround);
        BackGround.setBounds(0, 0, 500, 326);

        New.setText("New game");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        jButton1.setText("how to play");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Game, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Load)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(New)
                .addGap(15, 15, 15))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 46, Short.MAX_VALUE)
                    .addComponent(MainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 47, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(New)
                    .addComponent(Save)
                    .addComponent(Load)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(12, 12, 12)
                .addComponent(Game, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(MainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setBounds(650, 250, 534, 421);
    }// </editor-fold>//GEN-END:initComponents
/*
    ******************************
    ******************************
    **********Characters**********
    ******************************
    ******************************
    */
    private void M1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M1ActionPerformed
       if(player<2&&turn.equals("l")){
         play(1);
         player++;
       }
    }//GEN-LAST:event_M1ActionPerformed

    private void M7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M7ActionPerformed
        play(7);
    }//GEN-LAST:event_M7ActionPerformed

    private void M8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M8ActionPerformed
        play(8);
    }//GEN-LAST:event_M8ActionPerformed

    private void M2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M2ActionPerformed
        if(player<2&&turn.equals("l")){
         play(2);
         player++;
       }
    }//GEN-LAST:event_M2ActionPerformed

    private void M3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M3ActionPerformed
       if(player<2&&turn.equals("l")){
         play(3);
         player++;
       }
    }//GEN-LAST:event_M3ActionPerformed

    private void M4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M4ActionPerformed
       if(player<2&&turn.equals("r")){
         play(4);
         player++;
       }
    }//GEN-LAST:event_M4ActionPerformed

    private void M5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M5ActionPerformed
       if(player<2&&turn.equals("r")){
         play(5);
         player++;
       }
    }//GEN-LAST:event_M5ActionPerformed

    private void M6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_M6ActionPerformed
       if(player<2&&turn.equals("r")){
         play(6);
         player++;
        }
    }//GEN-LAST:event_M6ActionPerformed

    private void P1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P1ActionPerformed
        if(player<2&&turn.equals("l")){
         play(9);
         player++;
       }
    }//GEN-LAST:event_P1ActionPerformed

    private void P2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P2ActionPerformed
       if(player<2&&turn.equals("l")){
         play(10);
         player++;
       }
    }//GEN-LAST:event_P2ActionPerformed

    private void P3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P3ActionPerformed
        if(player<2&&turn.equals("l")){
         play(11);
         player++;
       }
    }//GEN-LAST:event_P3ActionPerformed

    private void P4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P4ActionPerformed
        if(player<2&&turn.equals("r")){
         play(12);
         player++;
       }
    }//GEN-LAST:event_P4ActionPerformed

    private void P5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P5ActionPerformed
        if(player<2&&turn.equals("r")){
         play(13);
         player++;
       }
    }//GEN-LAST:event_P5ActionPerformed

    private void P6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P6ActionPerformed
        if(player<2&&turn.equals("r")){
         play(14);
         player++;
       }
    }//GEN-LAST:event_P6ActionPerformed

    private void P7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P7ActionPerformed
       play(15);
    }//GEN-LAST:event_P7ActionPerformed

    private void P8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_P8ActionPerformed
        play(16);
    }//GEN-LAST:event_P8ActionPerformed
/*
    ******************************
    ******************************
    *************Else*************
    ******************************
    ******************************
    */
    
    private void PlayBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayBActionPerformed
        playing();
    }//GEN-LAST:event_PlayBActionPerformed
    private void playing(){
        if(player>0){
            //First person---------------------
        if(P7.isVisible()){
            if(turn.equals("l")){
                if(!P4.isVisible())
                    P4.setVisible(true);
                else if(!P5.isVisible())
                    P5.setVisible(true);
                else
                    P6.setVisible(true);
            leftP--;
            rightP++;
            }
            else{
                if(!P1.isVisible())
                    P1.setVisible(true);
                else if(!P2.isVisible())
                    P2.setVisible(true);
                else
                    P3.setVisible(true);
                rightP--;
                leftP++;
                }
            P7.setVisible(false);
            
            
        }
        //Second person---------------
        if(P8.isVisible()){
          if(turn.equals("l")){
                if(!P4.isVisible())
                    P4.setVisible(true);
                else if(!P5.isVisible())
                    P5.setVisible(true);
                else
                    P6.setVisible(true);
                leftP--;
                rightP++;
            }
            else{
                if(!P1.isVisible())
                    P1.setVisible(true);
                else if(!P2.isVisible())
                    P2.setVisible(true);
                else
                    P3.setVisible(true);
                rightP--;
                leftP++;
                }  
          P8.setVisible(false);
        }
        //First monster----------------
        if(M7.isVisible()){
            if(turn.equals("l")){
                if(!M4.isVisible())
                    M4.setVisible(true);
                else if(!M5.isVisible())
                    M5.setVisible(true);
                else
                    M6.setVisible(true);
                leftM--;
                rightM++;
            }
            else{
                if(!M1.isVisible())
                    M1.setVisible(true);
                else if(!M2.isVisible())
                    M2.setVisible(true);
                else
                    M3.setVisible(true);
                rightM--;
                leftM++;
                }
            M7.setVisible(false);
        }
        //Second monster-----------------
        if(M8.isVisible()){
            if(turn.equals("l")){
                if(!M4.isVisible())
                    M4.setVisible(true);
                else if(!M5.isVisible())
                    M5.setVisible(true);
                else
                    M6.setVisible(true);
                leftM--;
                rightM++;
            }
            else{
                if(!M1.isVisible())
                    M1.setVisible(true);
                else if(!M2.isVisible())
                    M2.setVisible(true);
                else
                    M3.setVisible(true);
                leftM++;
                rightM--;
                }
            M8.setVisible(false);
        }
        player=0;
        swap();
        LoseNWin();
        }
    }
//this part just to call newGame and start a new game
    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        int i = JOptionPane.showConfirmDialog(null, "You will lose all things you did\nAre you sure to start a new game?");
        if(i==JOptionPane.YES_NO_OPTION)
        newGame();
    }//GEN-LAST:event_NewActionPerformed

    private void swap(){
          if(turn.equals("l")){
            turn="r";
            M7.setIcon(new ImageIcon(this.getClass().getResource("Monster2.png")));
            M8.setIcon(new ImageIcon(this.getClass().getResource("Monster2.png")));
            P7.setIcon(new ImageIcon(this.getClass().getResource("People2.png")));
            P8.setIcon(new ImageIcon(this.getClass().getResource("People2.png")));
            M1.setIcon(new ImageIcon(this.getClass().getResource("Sleep.png")));
            M2.setIcon(new ImageIcon(this.getClass().getResource("Sleep.png")));
            P1.setIcon(new ImageIcon(this.getClass().getResource("Sleep.png")));
            P2.setIcon(new ImageIcon(this.getClass().getResource("Sleep.png")));
            M3.setIcon(new ImageIcon(this.getClass().getResource("Sleep.png")));
            P3.setIcon(new ImageIcon(this.getClass().getResource("Sleep.png")));
            M4.setIcon(new ImageIcon(this.getClass().getResource("Monster2.png")));
            M5.setIcon(new ImageIcon(this.getClass().getResource("Monster2.png")));
            P4.setIcon(new ImageIcon(this.getClass().getResource("People2.png")));
            P5.setIcon(new ImageIcon(this.getClass().getResource("People2.png")));
            M6.setIcon(new ImageIcon(this.getClass().getResource("Monster2.png")));
            P6.setIcon(new ImageIcon(this.getClass().getResource("People2.png")));
            
        
        }
        else{
            turn="l";
            M7.setIcon(new ImageIcon(this.getClass().getResource("Monster.png")));
            M8.setIcon(new ImageIcon(this.getClass().getResource("Monster.png")));
            P7.setIcon(new ImageIcon(this.getClass().getResource("People.png")));
            P8.setIcon(new ImageIcon(this.getClass().getResource("People.png")));
            M4.setIcon(new ImageIcon(this.getClass().getResource("Sleep2.png")));
            M5.setIcon(new ImageIcon(this.getClass().getResource("Sleep2.png")));
            P4.setIcon(new ImageIcon(this.getClass().getResource("Sleep2.png")));
            P5.setIcon(new ImageIcon(this.getClass().getResource("Sleep2.png")));
            M6.setIcon(new ImageIcon(this.getClass().getResource("Sleep2.png")));
            P6.setIcon(new ImageIcon(this.getClass().getResource("Sleep2.png")));
            M1.setIcon(new ImageIcon(this.getClass().getResource("Monster.png")));
            M2.setIcon(new ImageIcon(this.getClass().getResource("Monster.png")));
            P1.setIcon(new ImageIcon(this.getClass().getResource("People.png")));
            P2.setIcon(new ImageIcon(this.getClass().getResource("People.png")));
            M3.setIcon(new ImageIcon(this.getClass().getResource("Monster.png")));
            P3.setIcon(new ImageIcon(this.getClass().getResource("People.png")));
            
        }
    }
    
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
       try{
           Formatter Save = new Formatter("Save.txt");
           if(P1.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P2.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P3.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P4.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P5.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P6.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P7.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(P8.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M1.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M2.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M3.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M4.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M5.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M6.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M7.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           if(M8.isVisible()){
               Save.format("1 ");
           }
           else{
               Save.format("0 ");
           }
           Save.format(turn+" ");
           Save.format(Integer.toString(player)+" ");
           Save.format(Integer.toString(leftP)+" ");
           Save.format(Integer.toString(rightP)+" ");
           Save.format(Integer.toString(leftM)+" ");
           Save.format(Integer.toString(rightM)+" ");
           Save.format(DisplaySide.getText());
           Save.close();
           JOptionPane.showMessageDialog(null, "The game is saved");
       } catch (FileNotFoundException ex) {
            System.out.println("Problem while saving data");
        }
       
    }//GEN-LAST:event_SaveActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        Path Load = Paths.get("Save.txt");
        if(Files.exists(Load)){
            int i = JOptionPane.showConfirmDialog(null, "Are you sure you want to load a game?");
            if(i== JOptionPane.YES_OPTION){
            try {
                Scanner input = new Scanner(Paths.get("Save.txt"));
                 i = input.nextInt();
                if(i==1){
                    P1.setVisible(true);
                }
                else
                    P1.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P2.setVisible(true);
                }
                else
                    P2.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P3.setVisible(true);
                }
                else
                    P3.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P4.setVisible(true);
                }
                else
                    P4.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P5.setVisible(true);
                }
                else
                    P5.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P6.setVisible(true);
                }
                else
                    P6.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P7.setVisible(true);
                }
                else
                    P7.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    P8.setVisible(true);
                }
                else
                    P8.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M1.setVisible(true);
                }
                else
                    M1.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M2.setVisible(true);
                }
                else
                    M2.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M3.setVisible(true);
                }
                else
                    M3.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M4.setVisible(true);
                }
                else
                    M4.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M5.setVisible(true);
                }
                else
                    M5.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M6.setVisible(true);
                }
                else
                    M6.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M7.setVisible(true);
                }
                else
                    M7.setVisible(false);
                i = input.nextInt();
                if(i==1){
                    M8.setVisible(true);
                }
                else
                    M8.setVisible(false);
                String s = input.next();
                if(s.equals("l"))
                    turn = "l";
                else
                    turn = "r";
                player = input.nextInt();
                leftP = input.nextInt();
                rightP=input.nextInt();
                leftM=input.nextInt();
                rightM=input.nextInt();
                DisplaySide.setText(input.nextLine());
                if(turn.equals("l"))
                    turn="r";
                else
                    turn="l";
                swap();
                JOptionPane.showMessageDialog(null, "Load game is done");
            } catch (IOException ex) {
                Logger.getLogger(MonstersAndPeople.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "There is no saved game");
        }
    }//GEN-LAST:event_LoadActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(null, "this is a puzzle where you have to transmit all yellow and red cubes to the other sides.\n"
                + "1-in this puzzle you can transmit 2 cubes at once only, select 2 or 1 then click play in the top right.\n"
                + "2-the only side you can transmit is the side written in top left.\n"
                + "3-to transmit you most transmit at least 1 cube, other wise nothing will happen.\n"
                + "4-Becareful, the yellow are killers, so you most not keep less number of red with yellows,\n"
                + "if the number of red cubes less than yellow, you will lose.\n"
                + "5-if there is no red cubes or equals to yellow, you will not lose.");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void BackGroundKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BackGroundKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_BackGroundKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       int i= JOptionPane.showConfirmDialog(null, "Do you want back to main menu?");
       if(i==JOptionPane.YES_OPTION){
           Main_Menu();
       }
           
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        MainMenu.setVisible(false);
        Game.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JOptionPane.showMessageDialog(null, "developer team\n"
                + "Draw:Alroy Sparkle.\n"
                + "Coding:Alroy Sparkle\n"
                +"Music: Stolen form death note XP\n"
                + "Special thank \"اصال\" ");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int i=JOptionPane.showConfirmDialog(null, "are you sure you want to exit?");
        if(i==JOptionPane.YES_OPTION)
        this.dispose();    
    }//GEN-LAST:event_jButton6ActionPerformed
   
//here is responsible to just check if the player lost or win or neither
    private void LoseNWin(){
        //lost part
        if(leftM>leftP&& leftP!=0 || rightM>rightP&&rightP!=0){
           int select = JOptionPane.showConfirmDialog(null, "You lost\n Do you want play a new game?");
           if(select == JOptionPane.NO_OPTION){
                System.exit(0);
           }
           else
               newGame();
        }
        //win part
        else if(rightM==3&&rightP==3){
          int select =  JOptionPane.showConfirmDialog(null, "You won\n Do you want play a new game?");
            if(select == JOptionPane.NO_OPTION){
                System.exit(0);
           }
            else
                newGame();
        }
        else{
            if(turn.equals("l"))
                DisplaySide.setText("Left turn");
            else
                DisplaySide.setText("Right turn");
        }
        
        
            
    }
    private void newGame(){
        P1.setVisible(true);
        P2.setVisible(true);
        P3.setVisible(true);
        P4.setVisible(false);
        P5.setVisible(false);
        P6.setVisible(false);
        P7.setVisible(false);
        P8.setVisible(false);
        M1.setVisible(true);
        M2.setVisible(true);
        M3.setVisible(true);
        M4.setVisible(false);
        M5.setVisible(false);
        M6.setVisible(false);
        M7.setVisible(false);
        M8.setVisible(false);
        leftP=3;
        rightP=0;
        leftM=3;
        rightM=0;
        player=0;
        turn="r";
        swap();
        DisplaySide.setText("Left turn");
    }
   //here to check which player choose and then play as it suppose
    private void play(int x){
        
        switch(x){
            
            case 1: if (!M8.isVisible()){
             M1.setVisible(false);
             M8.setVisible(true);
            }
            else if(!M7.isVisible()){
             M1.setVisible(false);
             M7.setVisible(true);
            }
            break;
            case 2:  if (!M8.isVisible()){
             M2.setVisible(false);
             M8.setVisible(true);
            }
            else if(!M7.isVisible()){
             M2.setVisible(false);
             M7.setVisible(true);
            }
            break;
            case 3: if (!M8.isVisible()){
             M3.setVisible(false);
             M8.setVisible(true);
            }
            else if(!M7.isVisible()){
             M3.setVisible(false);
             M7.setVisible(true);
            }
            break;
            case 4: if (!M8.isVisible()){
             M4.setVisible(false);
             M8.setVisible(true);
            }
            else if(!M7.isVisible()){
             M4.setVisible(false);
             M7.setVisible(true);
            }
            break;
            case 5: if (!M8.isVisible()){
             M5.setVisible(false);
             M8.setVisible(true);
            }
            else if(!M7.isVisible()){
             M5.setVisible(false);
             M7.setVisible(true);
            }
            break;
            case 6: if (!M8.isVisible()){
             M6.setVisible(false);
             M8.setVisible(true);
            }
            else if(!M7.isVisible()){
             M6.setVisible(false);
             M7.setVisible(true);
            }
            break;
            case 7:
                if(turn.equals("l")){
                 if(!M1.isVisible()){
                    M1.setVisible(true);
                    M7.setVisible(false);
                }
                 else if(!M2.isVisible()){
                    M2.setVisible(true);
                    M7.setVisible(false);
                 }
                 else{
                    M3.setVisible(true);
                    M7.setVisible(false);
                 }
                }
                else{
                 if(!M4.isVisible()){
                    M4.setVisible(true);
                    M7.setVisible(false);
                }
                 else if(!M5.isVisible()){
                    M5.setVisible(true);
                    M7.setVisible(false);
                 }
                 else{
                    M6.setVisible(true);
                    M7.setVisible(false);
                 }
                }
                player--;
                break;
            case 8: 
                if(turn.equals("l")){
                 if(!M1.isVisible()){
                    M1.setVisible(true);
                    M8.setVisible(false);
                }
                 else if(!M2.isVisible()){
                    M2.setVisible(true);
                    M8.setVisible(false);
                 }
                 else{
                    M3.setVisible(true);
                    M8.setVisible(false);
                 }
                }
                else{
                 if(!M4.isVisible()){
                    M4.setVisible(true);
                    M8.setVisible(false);
                }
                 else if(!M5.isVisible()){
                    M5.setVisible(true);
                    M8.setVisible(false);
                 }
                 else{
                    M6.setVisible(true);
                    M8.setVisible(false);
                 }
                }
                player--;
                break;
            /*
            ----------------------------------
            -------------People---------------
            ----------------------------------
            */
            case 9: if (!P8.isVisible()){
             P1.setVisible(false);
             P8.setVisible(true);
            }
            else if(!P7.isVisible()){
             P1.setVisible(false);
             P7.setVisible(true);
            }
            break;
            case 10: if (!P8.isVisible()){
             P2.setVisible(false);
             P8.setVisible(true);
            }
            else if(!P7.isVisible()){
             P2.setVisible(false);
             P7.setVisible(true);
            }
            break;
            case 11: if (!P8.isVisible()){
             P3.setVisible(false);
             P8.setVisible(true);
            }
            else if(!P7.isVisible()){
             P3.setVisible(false);
             P7.setVisible(true);
            }
            break;
            case 12: if (!P8.isVisible()){
             P4.setVisible(false);
             P8.setVisible(true);
            }
            else if(!P7.isVisible()){
             P4.setVisible(false);
             P7.setVisible(true);
            }
            break;
            case 13: if (!P8.isVisible()){
             P5.setVisible(false);
             P8.setVisible(true);
            }
            else if(!P7.isVisible()){
             P5.setVisible(false);
             P7.setVisible(true);
            }
            break;
            case 14: if (!P8.isVisible()){
             P6.setVisible(false);
             P8.setVisible(true);
            }
            else if(!P7.isVisible()){
             P6.setVisible(false);
             P7.setVisible(true);
            }
            break;
            case 15: 
                if(turn.equals("l")){
                 if(!P1.isVisible()){
                    P1.setVisible(true);
                    P7.setVisible(false);
                }
                 else if(!P2.isVisible()){
                    P2.setVisible(true);
                    P7.setVisible(false);
                 }
                 else{
                    P3.setVisible(true);
                    P7.setVisible(false);
                 }
                }
                else{
                 if(!P4.isVisible()){
                    P4.setVisible(true);
                    P7.setVisible(false);
                }
                 else if(!P5.isVisible()){
                    P5.setVisible(true);
                    P7.setVisible(false);
                 }
                 else{
                    P6.setVisible(true);
                    P7.setVisible(false);
                 }
                }
                player--;
                break;
                
            case 16:
                if(turn.equals("l")){
                 if(!P1.isVisible()){
                    P1.setVisible(true);
                    P8.setVisible(false);
                }
                 else if(!P2.isVisible()){
                    P2.setVisible(true);
                    P8.setVisible(false);
                 }
                 else{
                    P3.setVisible(true);
                    P8.setVisible(false);
                 }
                }
                else{
                 if(!P4.isVisible()){
                    P4.setVisible(true);
                    P8.setVisible(false);
                }
                 else if(!P5.isVisible()){
                    P5.setVisible(true);
                    P8.setVisible(false);
                 }
                 else{
                    P6.setVisible(true);
                    P8.setVisible(false);
                 }
                }
                player--;
                break;
            
            
            
            
            
            
            
            
            
            
        }
        
        
        
        
    }
private void Main_Menu(){
          MainMenu.setVisible(true);
          Game.setVisible(false);
        }
    /**
     * @param args the command line arguments
     */  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonstersAndPeople.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonstersAndPeople.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonstersAndPeople.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonstersAndPeople.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonstersAndPeople().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackGround;
    private javax.swing.JLabel DisplaySide;
    private javax.swing.JPanel Game;
    private javax.swing.JButton Load;
    private javax.swing.JButton M1;
    private javax.swing.JButton M2;
    private javax.swing.JButton M3;
    private javax.swing.JButton M4;
    private javax.swing.JButton M5;
    private javax.swing.JButton M6;
    private javax.swing.JButton M7;
    private javax.swing.JButton M8;
    private javax.swing.JPanel MainMenu;
    private javax.swing.JButton New;
    private javax.swing.JButton P1;
    private javax.swing.JButton P2;
    private javax.swing.JButton P3;
    private javax.swing.JButton P4;
    private javax.swing.JButton P5;
    private javax.swing.JButton P6;
    private javax.swing.JButton P7;
    private javax.swing.JButton P8;
    private javax.swing.JButton PlayB;
    private javax.swing.JButton Save;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    // End of variables declaration//GEN-END:variables

   
}
